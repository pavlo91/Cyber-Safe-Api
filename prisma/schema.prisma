generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id             String         @id @default(cuid())
  uuid           String         @unique @default(uuid())
  createdAt      DateTime       @default(now())
  email          String         @unique @db.Citext
  emailConfirmed Boolean        @default(false)
  newEmail       String?
  newEmailToken  String?        @unique
  password       String?
  passwordToken  String?        @unique
  name           String
  avatarId       String?        @unique
  avatar         Image?         @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  roles          UserRole[]
  parentRoles    ParentRole[]
  notifications  Notification[]
  uploads        Upload[]
  twitter        Twitter?

  @@index([emailConfirmed])
}

model School {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  name      String
  phone     String?
  addressId String?      @unique
  address   Address?     @relation(fields: [addressId], references: [id], onDelete: SetNull)
  logoId    String?      @unique
  logo      Image?       @relation(name: "SchoolLogo", fields: [logoId], references: [id], onDelete: SetNull)
  coverId   String?      @unique
  cover     Image?       @relation(name: "SchoolCover", fields: [coverId], references: [id], onDelete: SetNull)
  roles     SchoolRole[]
}

enum UserRoleType {
  STAFF
  ADMIN
  COACH
  ATHLETE
  PARENT
}

enum UserRoleStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model UserRole {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        UserRoleType
  status      UserRoleStatus @default(PENDING)
  statusToken String?        @unique
  schoolRole  SchoolRole?
  parentRole  ParentRole?

  @@index([userId])
  @@index([type])
  @@index([status])
}

model SchoolRole {
  schoolId   String
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userRoleId String   @unique
  userRole   UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([schoolId, userRoleId])
  @@index([schoolId])
}

model ParentRole {
  childUserId String
  childUser   User     @relation(fields: [childUserId], references: [id], onDelete: Cascade)
  userRoleId  String   @unique
  userRole    UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([childUserId, userRoleId])
  @@index([childUserId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  unread    Boolean  @default(true)
  body      String
  url       String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([unread])
  @@index([userId])
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  street    String
  city      String
  state     String
  zip       String
  school    School?
}

model Image {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  url         String
  userAvatar  User?
  schoolLogo  School?  @relation(name: "SchoolLogo")
  schoolCover School?  @relation(name: "SchoolCover")
}

model Upload {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  blobName  String   @unique
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum SettingType {
  BOOLEAN
}

model Setting {
  id      String      @id
  type    SettingType
  boolean Boolean?
}

model Twitter {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  indexedAt       DateTime @default(now())
  twitterId       String   @unique
  twitterUsername String
  userId          String?  @unique
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]
}

model Post {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  externalId String   @unique
  text       String
  twitterId  String
  twitter    Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  media      Media[]
}

enum MediaType {
  PHOTO
  VIDEO
}

model Media {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  externalId String    @unique
  type       MediaType
  mime       String
  url        String
  width      Int
  height     Int
  duration   Int
  blobName   String?
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}
