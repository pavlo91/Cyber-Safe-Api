generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model PendingPhoneNumbers {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  expiresAt   DateTime @default(dbgenerated("now() + interval '15 minutes'"))
  token       String   @unique
  phoneNumber String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([token])
  @@index([phoneNumber])
  @@index([userId])
}

model User {
  id                   String                @id @default(cuid())
  uuid                 String                @unique @default(uuid())
  createdAt            DateTime              @default(now())
  email                String                @unique @db.Citext
  newEmail             String?
  newEmailToken        String?               @unique
  password             String?
  passwordToken        String?               @unique
  name                 String
  phoneNumber          String?
  parentalApproval     Boolean?
  score                Float                 @default(1)
  avatarId             String?               @unique
  avatar               Image?                @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  roles                UserRole[]
  parentRoles          ParentRole[]
  notifications        Notification[]
  uploads              Upload[]
  twitterId            String?               @unique
  twitter              Twitter?              @relation(fields: [twitterId], references: [id], onDelete: SetNull)
  facebookId           String?               @unique
  facebook             Facebook?             @relation(fields: [facebookId], references: [id], onDelete: SetNull)
  instagramId          String?               @unique
  instagram            Instagram?            @relation(fields: [instagramId], references: [id], onDelete: SetNull)
  tiktokId             String?               @unique
  tiktok               TikTok?               @relation(fields: [tiktokId], references: [id], onDelete: SetNull)
  posts                Post[]
  notificationSettings NotificationSetting[]
  actions              Action[]
  activities           Activity[]
  parentConsent        ParentConsent[]       @relation(name: "Parent")
  childConsent         ParentConsent[]       @relation(name: "Child")
  pendingPhoneNumbers  PendingPhoneNumbers[]

  @@index([parentalApproval])
}

model ParentConsent {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  parentUserId String
  parentUser   User     @relation(fields: [parentUserId], references: [id], onDelete: Cascade, name: "Parent")
  childUserId  String
  childUser    User     @relation(fields: [childUserId], references: [id], onDelete: Cascade, name: "Child")
  signatureId  String?  @unique
  signature    Image?   @relation(fields: [signatureId], references: [id], onDelete: SetNull)
  version      String
  ip           String
}

enum NotificationSettingType {
  BOOLEAN
}

model NotificationSetting {
  id      String
  type    NotificationSettingType
  boolean Boolean?
  userId  String
  user    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([id, userId])
  @@index([userId])
}

model School {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  name      String
  phone     String?
  addressId String?      @unique
  address   Address?     @relation(fields: [addressId], references: [id], onDelete: SetNull)
  logoId    String?      @unique
  logo      Image?       @relation(name: "SchoolLogo", fields: [logoId], references: [id], onDelete: SetNull)
  coverId   String?      @unique
  cover     Image?       @relation(name: "SchoolCover", fields: [coverId], references: [id], onDelete: SetNull)
  roles     SchoolRole[]
}

enum UserRoleType {
  STAFF
  ADMIN
  COACH
  STUDENT
  PARENT
}

enum UserRoleStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model UserRole {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        UserRoleType
  status      UserRoleStatus @default(PENDING)
  statusToken String?        @unique
  schoolRole  SchoolRole?
  parentRole  ParentRole?

  @@index([userId])
  @@index([type])
  @@index([status])
}

model SchoolRole {
  schoolId   String
  school     School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  userRoleId String   @unique
  userRole   UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([schoolId, userRoleId])
  @@index([schoolId])
}

model ParentRole {
  childUserId String
  childUser   User     @relation(fields: [childUserId], references: [id], onDelete: Cascade)
  userRoleId  String   @unique
  userRole    UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([childUserId, userRoleId])
  @@index([childUserId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  unread    Boolean  @default(true)
  body      String
  url       String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([unread])
  @@index([userId])
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  street    String
  city      String
  state     String
  zip       String
  school    School?
}

model Image {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  url           String
  userAvatar    User?
  schoolLogo    School?        @relation(name: "SchoolLogo")
  schoolCover   School?        @relation(name: "SchoolCover")
  parentConsent ParentConsent?
}

model Upload {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  blobURL   String   @unique
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum SettingType {
  BOOLEAN
}

model Setting {
  id      String      @id
  type    SettingType
  boolean Boolean?
}

model Twitter {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  indexedAt             DateTime @default(now())
  twitterId             String   @unique
  twitterUsername       String
  twitterAccessToken    String
  twitterRefreshToken   String
  twitterTokenExpiresAt DateTime
  user                  User?
  posts                 Post[]
}

model Facebook {
  id                     String   @id @default(cuid())
  createdAt              DateTime @default(now())
  indexedAt              DateTime @default(now())
  facebookId             String   @unique
  facebookUsername       String
  facebookAccessToken    String
  facebookTokenExpiresAt DateTime
  user                   User?
  posts                  Post[]
}

model Instagram {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  indexedAt               DateTime @default(now())
  instagramId             String   @unique
  instagramUsername       String
  instagramAccessToken    String
  instagramTokenExpiresAt DateTime
  user                    User?
  posts                   Post[]
}

model TikTok {
  id                          String   @id @default(cuid())
  createdAt                   DateTime @default(now())
  indexedAt                   DateTime @default(now())
  tiktokId                    String   @unique
  tiktokUsername              String
  tiktokAccessToken           String
  tiktokRefreshToken          String
  tiktokTokenExpiresAt        DateTime
  tiktokRefreshTokenExpiresAt DateTime
  user                        User?
  posts                       Post[]
}

model Post {
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  externalId   String               @unique
  url          String
  text         String
  blobURL      String?
  severity     AnalysisItemSeverity @default(NONE)
  manualReview Boolean              @default(false)
  twitterId    String?
  twitter      Twitter?             @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  facebookId   String?
  facebook     Facebook?            @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  instagramId  String?
  instagram    Instagram?           @relation(fields: [instagramId], references: [id])
  tiktokId     String?
  tiktok       TikTok?              @relation(fields: [tiktokId], references: [id])
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  media        Media[]
  analysis     Analysis?
  actions      Action[]

  @@index([twitterId])
  @@index([severity])
  @@index([manualReview])
  @@index([userId])
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  externalId String    @unique
  type       MediaType
  mime       String
  url        String
  width      Int
  height     Int
  duration   Int
  blobURL    String?
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Action {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  typeId    String
  type      ActionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  postId    String
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model ActionType {
  id      String   @id
  name    String
  actions Action[]
}

model Analysis {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  postId    String         @unique
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  items     AnalysisItem[]

  @@index([postId])
}

enum AnalysisItemType {
  TEXT
  MEDIA
}

enum AnalysisItemStatus {
  IN_PROGRESS
  SUCCEEDED
  FAILED
}

enum AnalysisItemSeverity {
  NONE
  LOW
  HIGH
}

model AnalysisItem {
  id         String               @id @default(cuid())
  createdAt  DateTime             @default(now())
  type       AnalysisItemType
  status     AnalysisItemStatus
  error      String?
  source     String
  severity   AnalysisItemSeverity @default(NONE)
  reason     String?
  jobId      String?              @unique
  analysisId String
  analysis   Analysis             @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([severity])
  @@index([analysisId])
}

model Activity {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  typeId    String
  type      ActivityType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ActivityType {
  id         String     @id
  name       String
  activities Activity[]
}
