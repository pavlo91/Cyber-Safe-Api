generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id             String           @id @default(cuid())
  uuid           String           @unique @default(uuid())
  createdAt      DateTime         @default(now())
  email          String           @unique @db.Citext
  emailConfirmed Boolean          @default(false)
  newEmail       String?
  newEmailToken  String?          @unique
  password       String?
  passwordToken  String?          @unique
  name           String
  roles          UserRole[]
  parentRoles    ParentUserRole[]
  notifications  Notification[]

  @@index([emailConfirmed])
}

model Team {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  name          String
  roles         TeamUserRole[]
  notifications Notification[]
}

enum Role {
  STAFF
  ADMIN
  COACH
  ATHLETE
  PARENT
}

enum RoleStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model UserRole {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role
  status      RoleStatus      @default(PENDING)
  statusToken String?         @unique
  teamRole    TeamUserRole?
  parentRole  ParentUserRole?

  @@index([userId])
  @@index([role])
}

model TeamUserRole {
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userRoleId String   @unique
  userRole   UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([teamId, userRoleId])
  @@index([teamId])
  @@index([userRoleId])
}

model ParentUserRole {
  childUserId String
  childUser   User     @relation(fields: [childUserId], references: [id], onDelete: Cascade)
  userRoleId  String   @unique
  userRole    UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  relation    String?

  @@id([childUserId, userRoleId])
  @@index([childUserId])
  @@index([userRoleId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  unread    Boolean  @default(true)
  message   String
  url       String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([unread])
  @@index([userId])
  @@index([teamId])
}
